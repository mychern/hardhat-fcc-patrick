{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__PayMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currBal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "num_players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winnerPicked",
          "type": "address"
        }
      ],
      "name": "AddressPickedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31d843073334c9a4b5ccae5345a9a4a2b1c9680e0e17163b5621186d2c78dc95",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1203710",
    "logsBloom": "0x
    "blockHash": "0x8271c07366c621162f95ee9b5122bc5c0dfe1a3658db825cc75f24e3f9492a67",
    "transactionHash": "0x31d843073334c9a4b5ccae5345a9a4a2b1c9680e0e17163b5621186d2c78dc95",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1203710",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "fa84ba1330f13864ee7d072eb5b0af73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__PayMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num_players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winnerPicked\",\"type\":\"address\"}],\"name\":\"AddressPickedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mark\",\"details\":\"Contect implements Chainlink VRF v2 and Chainlink automation compatibility interface (formerly keepers).\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"When `checkUpNeeded` returns true as Chainlink Automation nodes listen to it, performUpKeep() runs on-chain. Conditions for `checkUpNeeded` to be true: 1. Time interval should have passed 2. The lottery should have at least 1 play with some ETH input 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" state.\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for mocking lec 9 of Patrick Collins's FCC course. About making a         verifiably random lottery generator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n\\nerror Raffle__PayMoreToEnterRaffle();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currBal, uint256 num_players, uint256 raffleState);\\n\\n\\n/**\\n * @title A sample Raffle Contract\\n * @author Mark\\n * @notice This contract is for mocking lec 9 of Patrick Collins's FCC course. About making a\\n *         verifiably random lottery generator.\\n * @dev Contect implements Chainlink VRF v2 and Chainlink automation compatibility interface (formerly keepers).\\n */\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type declarations */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    } // uint256 0 = OPEN, 1 = CALCULATING\\n    \\n    // State variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n\\n    // Events\\n    event RaffleEnter(address indexed player);\\n    event RequestRaffleWinner(uint256 indexed requestId);\\n    event AddressPickedWinner(address indexed winnerPicked);\\n\\n    // Functions\\n    constructor(\\n        address /*required by parent contract*/ vrfCoordinatorV2, // contract, so probably need to build a mock for it.\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) /*required as part of the contract inherited*/ VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) revert Raffle__PayMoreToEnterRaffle();\\n        if (s_raffleState != RaffleState.OPEN) revert Raffle__NotOpen();\\n        s_players.push(payable(msg.sender));\\n        // Emit an event when we updated a dynamic array or mapping.\\n        // Named events with the function name reversed.\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev When `checkUpNeeded` returns true as Chainlink Automation nodes listen\\n     * to it, performUpKeep() runs on-chain.\\n     * Conditions for `checkUpNeeded` to be true:\\n     * 1. Time interval should have passed\\n     * 2. The lottery should have at least 1 play with some ETH input\\n     * 3. Our subscription is funded with LINK\\n     * 4. The lottery should be in an \\\"open\\\" state.\\n     */\\n    function checkUpkeep(\\n        bytes memory /*because calldata doesnt work with string*/ /*checkData*/\\n    ) public \\n      view \\n      override \\n      returns (\\n        bool upkeepNeeded,\\n        bytes memory /* performData */\\n      ) \\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n    }\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        // Request the random number\\n        // Once we get it, do something with it.\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // gasLane (which sets a limit on the gas spent)\\n            i_subscriptionId, // subscription on chainlink needed to fund the link (as covered in sub-lecture on chainlink keeper)\\n            REQUEST_CONFIRMATIONS, // Number of block confirmations to wait before responding. Security measure.\\n            i_callbackGasLimit, // Limit the gas so that the fulfillRandomWords cant be something thats insanely expensive\\n            NUM_WORDS // number of random numbers to be produced.\\n        );\\n        emit RequestRaffleWinner(requestId);\\n    }\\n    function fulfillRandomWords(\\n        uint256 /*requestId, since never used*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN; // Reset raffleState after one round.\\n        s_players = new address payable[](0); // Reset players list after a winner has been selected for the previous round.\\n        s_lastTimeStamp = block.timestamp;\\n        (bool callSuccess, ) = recentWinner.call{value:address(this).balance}(\\\"\\\");\\n        if (!callSuccess) revert Raffle__TransferFailed();\\n        emit AddressPickedWinner(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 idx) public view returns (address) {\\n        return s_players[idx];\\n    }\\n\\n    function getRecentWinner() public view returns(address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords()\\n      public\\n      pure /*pure is used for cases including returning a constant variable*/ \\n      returns (\\n        uint256\\n      )\\n    {\\n        return NUM_WORDS; // In bytecode because is constant\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x4cf23a229f77ec75d0de33ca6dac04fc5767c87d0946a743e58d54a5e230e3b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200180338038062001803833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600260146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426001819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611434620003cf600039600081816107de015261084c0152600061069c01526000610679015260006106580152600061061c0152600081816102fa01526103f7015260008181610337015261038b01526114346000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bbe565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c50565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e04565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610ebb565b610564565b005b34801561018557600080fd5b5061018e610755565b60405161019b9190610f49565b60405180910390f35b3480156101b057600080fd5b506101b961077f565b6040516101c69190610bbe565b60405180910390f35b3480156101db57600080fd5b506101e461078e565b6040516101f19190610bbe565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190611019565b61079b565b60405161022f9291906110fc565b60405180910390f35b34801561024457600080fd5b5061024d610848565b60405161025a9190610bbe565b60405180910390f35b34801561026f57600080fd5b50610278610870565b6040516102859190610bbe565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b0919061112c565b61087a565b6040516102c29190610f49565b60405180910390f35b3480156102d757600080fd5b506102e06108c1565b6040516102ed9190610bbe565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611159565b60405180910390fd5b6103f182826108cd565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f20d65fee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bd9565b5b600260149054906101000a900460ff16600181111561048557610484610bd9565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e6040518060200160405280600081525061079b565b509050806105ed5747600080549050600260149054906101000a900460ff1660018111156105af576105ae610bd9565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e493929190611182565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561061357610612610bd9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dd959493929190611231565b6020604051808303816000875af11580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611299565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff1660018111156107c3576107c2610bd9565b5b600060018111156107d7576107d6610bd9565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261080b91906112f5565b1190506000806000805490501190506000804711905083801561082b5750825b80156108345750815b801561083d5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b600080828154811061088f5761088e611329565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108e8576108e7611329565b5b60200260200101516108fa9190611387565b9050600080828154811061091157610910611329565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff021916908360018111156109a5576109a4610bd9565b5b0217905550600067ffffffffffffffff8111156109c5576109c4610cc1565b5b6040519080825280602002602001820160405280156109f35781602001602082028036833780820191505090505b5060009080519060200190610a09929190610afe565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a37906113e9565b60006040518083038185875af1925050503d8060008114610a74576040519150601f19603f3d011682016040523d82523d6000602084013e610a79565b606091505b5050905080610ab4576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f60ed0d40c52684347fe06b19c0ccbd53ae32e7b9fa7a012e3a53c3d0063c08aa60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b77579160200282015b82811115610b765782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1e565b5b509050610b849190610b88565b5090565b5b80821115610ba1576000816000905550600101610b89565b5090565b6000819050919050565b610bb881610ba5565b82525050565b6000602082019050610bd36000830184610baf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1957610c18610bd9565b5b50565b6000819050610c2a82610c08565b919050565b6000610c3a82610c1c565b9050919050565b610c4a81610c2f565b82525050565b6000602082019050610c656000830184610c41565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8881610ba5565b8114610c9357600080fd5b50565b600081359050610ca581610c7f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cf982610cb0565b810181811067ffffffffffffffff82111715610d1857610d17610cc1565b5b80604052505050565b6000610d2b610c6b565b9050610d378282610cf0565b919050565b600067ffffffffffffffff821115610d5757610d56610cc1565b5b602082029050602081019050919050565b600080fd5b6000610d80610d7b84610d3c565b610d21565b90508083825260208201905060208402830185811115610da357610da2610d68565b5b835b81811015610dcc5780610db88882610c96565b845260208401935050602081019050610da5565b5050509392505050565b600082601f830112610deb57610dea610cab565b5b8135610dfb848260208601610d6d565b91505092915050565b60008060408385031215610e1b57610e1a610c75565b5b6000610e2985828601610c96565b925050602083013567ffffffffffffffff811115610e4a57610e49610c7a565b5b610e5685828601610dd6565b9150509250929050565b600080fd5b60008083601f840112610e7b57610e7a610cab565b5b8235905067ffffffffffffffff811115610e9857610e97610e60565b5b602083019150836001820283011115610eb457610eb3610d68565b5b9250929050565b60008060208385031215610ed257610ed1610c75565b5b600083013567ffffffffffffffff811115610ef057610eef610c7a565b5b610efc85828601610e65565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3382610f08565b9050919050565b610f4381610f28565b82525050565b6000602082019050610f5e6000830184610f3a565b92915050565b600080fd5b600067ffffffffffffffff821115610f8457610f83610cc1565b5b610f8d82610cb0565b9050602081019050919050565b82818337600083830152505050565b6000610fbc610fb784610f69565b610d21565b905082815260208101848484011115610fd857610fd7610f64565b5b610fe3848285610f9a565b509392505050565b600082601f83011261100057610fff610cab565b5b8135611010848260208601610fa9565b91505092915050565b60006020828403121561102f5761102e610c75565b5b600082013567ffffffffffffffff81111561104d5761104c610c7a565b5b61105984828501610feb565b91505092915050565b60008115159050919050565b61107781611062565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b757808201518184015260208101905061109c565b60008484015250505050565b60006110ce8261107d565b6110d88185611088565b93506110e8818560208601611099565b6110f181610cb0565b840191505092915050565b6000604082019050611111600083018561106e565b818103602083015261112381846110c3565b90509392505050565b60006020828403121561114257611141610c75565b5b600061115084828501610c96565b91505092915050565b600060408201905061116e6000830185610f3a565b61117b6020830184610f3a565b9392505050565b60006060820190506111976000830186610baf565b6111a46020830185610baf565b6111b16040830184610baf565b949350505050565b6000819050919050565b6111cc816111b9565b82525050565b600067ffffffffffffffff82169050919050565b6111ef816111d2565b82525050565b600061ffff82169050919050565b61120c816111f5565b82525050565b600063ffffffff82169050919050565b61122b81611212565b82525050565b600060a08201905061124660008301886111c3565b61125360208301876111e6565b6112606040830186611203565b61126d6060830185611222565b61127a6080830184611222565b9695505050505050565b60008151905061129381610c7f565b92915050565b6000602082840312156112af576112ae610c75565b5b60006112bd84828501611284565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130082610ba5565b915061130b83610ba5565b9250828203905081811115611323576113226112c6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139282610ba5565b915061139d83610ba5565b9250826113ad576113ac611358565b5b828206905092915050565b600081905092915050565b50565b60006113d36000836113b8565b91506113de826113c3565b600082019050919050565b60006113f4826113c6565b915081905091905056fea26469706673582212203cec3b3205291dca58d7708cd72187c92fc887f6553317aaf8f8f323318d1c6264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bbe565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c50565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e04565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610ebb565b610564565b005b34801561018557600080fd5b5061018e610755565b60405161019b9190610f49565b60405180910390f35b3480156101b057600080fd5b506101b961077f565b6040516101c69190610bbe565b60405180910390f35b3480156101db57600080fd5b506101e461078e565b6040516101f19190610bbe565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190611019565b61079b565b60405161022f9291906110fc565b60405180910390f35b34801561024457600080fd5b5061024d610848565b60405161025a9190610bbe565b60405180910390f35b34801561026f57600080fd5b50610278610870565b6040516102859190610bbe565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b0919061112c565b61087a565b6040516102c29190610f49565b60405180910390f35b3480156102d757600080fd5b506102e06108c1565b6040516102ed9190610bbe565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611159565b60405180910390fd5b6103f182826108cd565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f20d65fee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bd9565b5b600260149054906101000a900460ff16600181111561048557610484610bd9565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e6040518060200160405280600081525061079b565b509050806105ed5747600080549050600260149054906101000a900460ff1660018111156105af576105ae610bd9565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e493929190611182565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561061357610612610bd9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dd959493929190611231565b6020604051808303816000875af11580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611299565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff1660018111156107c3576107c2610bd9565b5b600060018111156107d7576107d6610bd9565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261080b91906112f5565b1190506000806000805490501190506000804711905083801561082b5750825b80156108345750815b801561083d5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b600080828154811061088f5761088e611329565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108e8576108e7611329565b5b60200260200101516108fa9190611387565b9050600080828154811061091157610910611329565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff021916908360018111156109a5576109a4610bd9565b5b0217905550600067ffffffffffffffff8111156109c5576109c4610cc1565b5b6040519080825280602002602001820160405280156109f35781602001602082028036833780820191505090505b5060009080519060200190610a09929190610afe565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a37906113e9565b60006040518083038185875af1925050503d8060008114610a74576040519150601f19603f3d011682016040523d82523d6000602084013e610a79565b606091505b5050905080610ab4576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f60ed0d40c52684347fe06b19c0ccbd53ae32e7b9fa7a012e3a53c3d0063c08aa60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b77579160200282015b82811115610b765782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1e565b5b509050610b849190610b88565b5090565b5b80821115610ba1576000816000905550600101610b89565b5090565b6000819050919050565b610bb881610ba5565b82525050565b6000602082019050610bd36000830184610baf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1957610c18610bd9565b5b50565b6000819050610c2a82610c08565b919050565b6000610c3a82610c1c565b9050919050565b610c4a81610c2f565b82525050565b6000602082019050610c656000830184610c41565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8881610ba5565b8114610c9357600080fd5b50565b600081359050610ca581610c7f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cf982610cb0565b810181811067ffffffffffffffff82111715610d1857610d17610cc1565b5b80604052505050565b6000610d2b610c6b565b9050610d378282610cf0565b919050565b600067ffffffffffffffff821115610d5757610d56610cc1565b5b602082029050602081019050919050565b600080fd5b6000610d80610d7b84610d3c565b610d21565b90508083825260208201905060208402830185811115610da357610da2610d68565b5b835b81811015610dcc5780610db88882610c96565b845260208401935050602081019050610da5565b5050509392505050565b600082601f830112610deb57610dea610cab565b5b8135610dfb848260208601610d6d565b91505092915050565b60008060408385031215610e1b57610e1a610c75565b5b6000610e2985828601610c96565b925050602083013567ffffffffffffffff811115610e4a57610e49610c7a565b5b610e5685828601610dd6565b9150509250929050565b600080fd5b60008083601f840112610e7b57610e7a610cab565b5b8235905067ffffffffffffffff811115610e9857610e97610e60565b5b602083019150836001820283011115610eb457610eb3610d68565b5b9250929050565b60008060208385031215610ed257610ed1610c75565b5b600083013567ffffffffffffffff811115610ef057610eef610c7a565b5b610efc85828601610e65565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3382610f08565b9050919050565b610f4381610f28565b82525050565b6000602082019050610f5e6000830184610f3a565b92915050565b600080fd5b600067ffffffffffffffff821115610f8457610f83610cc1565b5b610f8d82610cb0565b9050602081019050919050565b82818337600083830152505050565b6000610fbc610fb784610f69565b610d21565b905082815260208101848484011115610fd857610fd7610f64565b5b610fe3848285610f9a565b509392505050565b600082601f83011261100057610fff610cab565b5b8135611010848260208601610fa9565b91505092915050565b60006020828403121561102f5761102e610c75565b5b600082013567ffffffffffffffff81111561104d5761104c610c7a565b5b61105984828501610feb565b91505092915050565b60008115159050919050565b61107781611062565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b757808201518184015260208101905061109c565b60008484015250505050565b60006110ce8261107d565b6110d88185611088565b93506110e8818560208601611099565b6110f181610cb0565b840191505092915050565b6000604082019050611111600083018561106e565b818103602083015261112381846110c3565b90509392505050565b60006020828403121561114257611141610c75565b5b600061115084828501610c96565b91505092915050565b600060408201905061116e6000830185610f3a565b61117b6020830184610f3a565b9392505050565b60006060820190506111976000830186610baf565b6111a46020830185610baf565b6111b16040830184610baf565b949350505050565b6000819050919050565b6111cc816111b9565b82525050565b600067ffffffffffffffff82169050919050565b6111ef816111d2565b82525050565b600061ffff82169050919050565b61120c816111f5565b82525050565b600063ffffffff82169050919050565b61122b81611212565b82525050565b600060a08201905061124660008301886111c3565b61125360208301876111e6565b6112606040830186611203565b61126d6060830185611222565b61127a6080830184611222565b9695505050505050565b60008151905061129381610c7f565b92915050565b6000602082840312156112af576112ae610c75565b5b60006112bd84828501611284565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130082610ba5565b915061130b83610ba5565b9250828203905081811115611323576113226112c6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139282610ba5565b915061139d83610ba5565b9250826113ad576113ac611358565b5b828206905092915050565b600081905092915050565b50565b60006113d36000836113b8565b91506113de826113c3565b600082019050919050565b60006113f4826113c6565b915081905091905056fea26469706673582212203cec3b3205291dca58d7708cd72187c92fc887f6553317aaf8f8f323318d1c6264736f6c63430008110033",
  "devdoc": {
    "author": "Mark",
    "details": "Contect implements Chainlink VRF v2 and Chainlink automation compatibility interface (formerly keepers).",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "When `checkUpNeeded` returns true as Chainlink Automation nodes listen to it, performUpKeep() runs on-chain. Conditions for `checkUpNeeded` to be true: 1. Time interval should have passed 2. The lottery should have at least 1 play with some ETH input 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" state."
      }
    },
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for mocking lec 9 of Patrick Collins's FCC course. About making a         verifiably random lottery generator.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1162,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1173,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1183,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1186,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)1157"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1157": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}